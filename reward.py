import math
import numpy as np



def get_racing_line_waypoints():
    return [[  6.61930003,   3.69014067,   6.56131211,   3.15990216,
          6.67728796,   4.22037918,   6.54520631,   3.61259283],
       [  6.91976323,   3.6574257 ,   6.84878769,   3.12876922,
          6.99073878,   4.18608219,   6.76822003,   3.50927247],
       [  7.218043  ,   3.60976082,   7.08719101,   3.09266025,
          7.34889498,   4.1268614 ,   6.95520004,   3.38330247],
       [  7.50246849,   3.51003331,   7.23238507,   3.05006534,
          7.77255192,   3.97000128,   7.10355822,   3.23782433],
       [  7.72611561,   3.31203372,   7.2759718 ,   3.02587611,
          8.17625942,   3.59819132,   7.20910612,   3.07584885],
       [  7.81049934,   3.02546317,   7.27908888,   2.97943813,
          8.34190979,   3.0714882 ,   7.26708866,   2.90156085],
       [  7.77638021,   2.72635871,   7.26004877,   2.86021215,
          8.29271164,   2.59250528,   7.26465322,   2.72094251],
       [  7.66075983,   2.44804019,   7.19559803,   2.70907623,
          8.12592163,   2.18700415,   7.21217811,   2.5427554 ],
       [  7.48315873,   2.2039572 ,   7.08423987,   2.55804617,
          7.8820776 ,   1.84986824,   7.11351007,   2.37279443],
       [  7.26189151,   1.9986682 ,   6.93888703,   2.42314822,
          7.58489599,   1.57418818,   6.97177094,   2.21634735],
       [  7.00503292,   1.84013319,   6.77030888,   2.31911117,
          7.23975697,   1.36115522,   6.79125766,   2.07795286],
       [  6.72235742,   1.73426879,   6.5847558 ,   2.2496143 ,
          6.85995903,   1.21892327,   6.57697219,   1.96118991],
       [  6.42455783,   1.68513877,   6.37774267,   2.21648032,
          6.47137299,   1.15379721,   6.33537657,   1.86749821],
       [  6.122363  ,   1.68143469,   6.11855688,   2.21482116,
          6.12616911,   1.14804823,   6.07280526,   1.79647899],
       [  5.82013049,   1.68082679,   5.81950512,   2.21422631,
          5.82075587,   1.14742726,   5.79497338,   1.74614668],
       [  5.51789751,   1.6807257 ,   5.51833   ,   2.21412522,
          5.51746502,   1.14732617,   5.50664699,   1.71345786],
       [  5.21566477,   1.68131727,   5.2170147 ,   2.21471531,
          5.21431484,   1.14791924,   5.21167085,   1.69447983],
       [  4.91343298,   1.68225527,   4.91535702,   2.21565134,
          4.91150894,   1.14885921,   4.91251966,   1.68604995],
       [  4.6112031 ,   1.68349773,   4.61420908,   2.21688921,
          4.60819712,   1.15010625,   4.61116358,   1.6846467 ],
       [  4.30897751,   1.68566174,   4.3133029 ,   2.21904427,
          4.30465212,   1.1522792 ,   4.30899512,   1.68703026],
       [  4.00675693,   1.6883992 ,   4.01192179,   2.22177416,
          4.00159207,   1.15502423,   4.00678845,   1.69021052],
       [  3.70453932,   1.69151521,   3.71096387,   2.22487623,
          3.69811478,   1.15815419,   3.70458776,   1.69375371],
       [  3.40233543,   1.6956802 ,   3.41058293,   2.22901613,
          3.39408794,   1.16234428,   3.41060382,   1.68907469],
       [  3.10014692,   1.70086122,   3.11465087,   2.23406417,
          3.08564296,   1.16765827,   3.13331061,   1.66674832],
       [  2.79818335,   1.71211374,   2.8234159 ,   2.24491626,
          2.77295079,   1.17931122,   2.87930487,   1.62095617],
       [  2.49649086,   1.72944928,   2.50302186,   2.26280934,
          2.48995986,   1.19608921,   2.65238489,   1.54979676],
       [  2.19454732,   1.71950972,   2.13873186,   2.24998123,
          2.25036278,   1.18903822,   2.45466637,   1.45350663],
       [  1.89774736,   1.66649425,   1.68355491,   2.15499932,
          2.11193981,   1.17798919,   2.29008601,   1.33138149],
       [  1.66012141,   1.48596877,   1.2460449 ,   1.82220728,
          2.07419791,   1.14973027,   2.16467487,   1.18234586],
       [  1.53172144,   1.21529919,   1.00706389,   1.31147617,
          2.05637899,   1.11912221,   2.09283774,   1.00324445],
       [  1.55563494,   0.91828245,   1.04141095,   0.77654773,
          2.06985893,   1.06001717,   2.06844002,   0.80402061],
       [  1.68905291,   0.64733801,   1.22314885,   0.38762921,
          2.15495696,   0.9070468 ,   2.0895861 ,   0.59152025],
       [  1.84935483,   0.39136536,   1.40818289,   0.09156091,
          2.29052677,   0.6911698 ,   2.15537896,   0.37333498],
       [  2.02844396,   0.14792621,   1.60388293,  -0.17497238,
          2.45300498,   0.47082481,   2.26228925,   0.15824643],
       [  2.21521535,  -0.08968348,   1.79547682,  -0.41882628,
          2.63495388,   0.23945932,   2.40442577,  -0.04634203],
       [  2.40143337,  -0.32772842,   1.97722688,  -0.6510927 ,
          2.82563987,  -0.00436414,   2.57435752,  -0.2366141 ],
       [  2.58162334,  -0.57035659,   2.14854684,  -0.88174081,
          3.01469984,  -0.25897237,   2.76668868,  -0.41085064],
       [  2.7542434 ,  -0.8184202 ,   2.33961287,  -1.15397483,
          3.16887393,  -0.48286557,   2.97701602,  -0.56879729],
       [  2.96050742,  -1.03858724,   2.60768595,  -1.43862778,
          3.31332889,  -0.6385467 ,   3.20187549,  -0.71102746],
       [  3.20486393,  -1.21582895,   2.92539587,  -1.67015582,
          3.48433199,  -0.76150208,   3.43861308,  -0.83847783],
       [  3.47335544,  -1.35404321,   3.26203194,  -1.84379583,
          3.68467894,  -0.86429059,   3.6852062 ,  -0.95220058],
       [  3.75819888,  -1.45458144,   3.61305895,  -1.96785479,
          3.90333882,  -0.94130808,   3.94006223,  -1.05330664],
       [  4.05345192,  -1.51808321,   3.97450772,  -2.0456087 ,
          4.13239613,  -0.99055773,   4.20186007,  -1.14298551],
       [  4.35446587,  -1.54380577,   4.33397999,  -2.07681173,
          4.37495175,  -1.01079982,   4.46944532,  -1.22253491],
       [  4.65661588,  -1.54126328,   4.68136206,  -2.07408875,
          4.6318697 ,  -1.00843781,   4.74181238,  -1.29328805],
       [  4.9577128 ,  -1.51578885,   5.00559178,  -2.04703587,
          4.90983381,  -0.98454183,   5.01814309,  -1.35644423],
       [  5.25797096,  -1.48706931,   5.27572289,  -2.02017373,
          5.24021902,  -0.95396489,   5.29772397,  -1.41310987],
       [  5.56068506,  -1.49578565,   5.54219809,  -2.0288648 ,
          5.57917204,  -0.9627065 ,   5.5798022 ,  -1.46427223],
       [  5.86363688,  -1.50807598,   5.84848395,  -2.04126066,
          5.87878981,  -0.9748913 ,   5.86312267,  -1.51078037],
       [  6.16609898,  -1.51299983,   6.16251602,  -2.04638785,
          6.16968193,  -0.97961181,   6.14475652,  -1.55273752],
       [  6.46817532,  -1.51214027,   6.46839466,  -2.04553979,
          6.46795597,  -0.97874075,   6.42232692,  -1.59793744],
       [  6.77034893,  -1.51275175,   6.76853504,  -2.04614871,
          6.77216282,  -0.9793548 ,   6.69562374,  -1.64908774],
       [  7.07257905,  -1.51419574,   7.07003012,  -2.04758972,
          7.07512799,  -0.98080176,   6.96266637,  -1.70867639],
       [  7.37480822,  -1.51564026,   7.36825171,  -2.04899972,
          7.38136473,  -0.98228079,   7.22135464,  -1.77902437],
       [  7.67695823,  -1.52162534,   7.62502566,  -2.05249089,
          7.7288908 ,  -0.99075979,   7.46919835,  -1.86245502],
       [  7.97421398,  -1.57425224,   7.83168354,  -2.08825677,
          8.11674442,  -1.06024772,   7.70348741,  -1.96088107],
       [  8.25612583,  -1.68222522,   8.0189251 ,  -2.15998166,
          8.49332657,  -1.20446878,   7.92102589,  -2.07591341],
       [  8.51255169,  -1.84153026,   8.18930187,  -2.26582378,
          8.83580151,  -1.41723674,   8.11874408,  -2.20818054],
       [  8.7342166 ,  -2.04646033,   8.33644333,  -2.40183586,
          9.13198986,  -1.6910848 ,   8.29111463,  -2.35914853],
       [  8.91297522,  -2.28972619,   8.45551434,  -2.56403368,
          9.3704361 ,  -2.01541871,   8.43049346,  -2.52936203],
       [  9.04335728,  -2.56201726,   8.54515591,  -2.7525708 ,
          9.54155865,  -2.37146371,   8.52876084,  -2.71610147],
       [  9.12796679,  -2.8518247 ,   8.60489979,  -2.95630568,
          9.65103379,  -2.74734372,   8.59280912,  -2.91118835],
       [  9.16117516,  -3.15181118,   8.62786617,  -3.16164368,
          9.69448414,  -3.14197868,   8.6247877 ,  -3.11042998],
       [  9.13904848,  -3.45280832,   8.61296311,  -3.36477679,
          9.66513386,  -3.54083985,   8.62218423,  -3.31044767],
       [  9.06198445,  -3.74459284,   8.56526413,  -3.55021184,
          9.55870476,  -3.93897384,   8.5811912 ,  -3.50687975],
       [  8.92073479,  -4.01081723,   8.49109688,  -3.69470566,
          9.3503727 ,  -4.32692879,   8.49294021,  -3.6921161 ],
       [  8.70883885,  -4.22464841,   8.39215794,  -3.79542988,
          9.02551975,  -4.65386694,   8.34399211,  -3.84874215],
       [  8.44191017,  -4.36407631,   8.26034012,  -3.86253088,
          8.62348023,  -4.86562174,   8.16175534,  -3.98170397],
       [  8.14716473,  -4.42792469,   8.08971729,  -3.89762777,
          8.20461216,  -4.95822161,   7.95104398,  -4.0900773 ],
       [  7.84543457,  -4.42867762,   7.869203  ,  -3.89580768,
          7.82166615,  -4.96154755,   7.71682412,  -4.17443709],
       [  7.54467812,  -4.40103775,   7.58691111,  -3.8693127 ,
          7.50244513,  -4.9327628 ,   7.46370944,  -4.23635981],
       [  7.24312034,  -4.38084024,   7.27887287,  -3.84863966,
          7.2073678 ,  -4.91304081,   7.19573018,  -4.27801845],
       [  6.94157138,  -4.36052125,   6.97763195,  -3.82834166,
          6.90551081,  -4.89270085,   6.91575409,  -4.30091039],
       [  6.64003744,  -4.33997517,   6.67658987,  -3.80782979,
          6.60348501,  -4.87212056,   6.62687804,  -4.30730307],
       [  6.33852592,  -4.31909924,   6.3757309 ,  -3.78699869,
          6.30132094,  -4.8511998 ,   6.33252076,  -4.29925122],
       [  6.03704324,  -4.29781383,   6.07504168,  -3.7657687 ,
          5.9990448 ,  -4.82985896,   6.03641905,  -4.27903637],
       [  5.73559585,  -4.27603882,   5.77435198,  -3.74404877,
          5.69683972,  -4.80802887,   5.74088636,  -4.24878093],
       [  5.43417492,  -4.25389427,   5.47351399,  -3.72194689,
          5.39483586,  -4.78584164,   5.44687907,  -4.21018218],
       [  5.13277593,  -4.23145836,   5.17277184,  -3.69955986,
          5.09278002,  -4.76335686,   5.15467748,  -4.164576  ],
       [  4.83141055,  -4.20856982,   4.87239304,  -3.67674678,
          4.79042807,  -4.74039286,   4.86432334,  -4.11288444],
       [  4.53009691,  -4.18501514,   4.57253876,  -3.65330666,
          4.48765507,  -4.71672362,   4.57561143,  -4.05625397],
       [  4.22886243,  -4.16047245,   4.27337208,  -3.62893289,
          4.18435278,  -4.69201201,   4.28839463,  -3.99537267],
       [  3.92774096,  -4.13457626,   3.97550192,  -3.60331887,
          3.87997999,  -4.66583365,   4.00252063,  -3.93082927],
       [  3.62682989,  -4.10634881,   3.6827909 ,  -3.57589286,
          3.57086888,  -4.63680476,   3.71783467,  -3.86315736],
       [  3.3266789 ,  -4.07116681,   3.401261  ,  -3.54300683,
          3.2520968 ,  -4.59932679,   3.43418584,  -3.79284375],
       [  3.02849987,  -4.0218572 ,   3.13658681,  -3.49952382,
          2.92041292,  -4.54419058,   3.15142876,  -3.72033784],
       [  2.73555746,  -3.94885879,   2.91921201,  -3.44807285,
          2.55190292,  -4.44964474,   2.8694507 ,  -3.64599947],
       [  2.46532693,  -3.81538075,   2.75533595,  -3.36770886,
          2.17531791,  -4.26305264,   2.5881757 ,  -3.570124  ],
       [  2.23276487,  -3.62309223,   2.59964195,  -3.23590177,
          1.86588779,  -4.01028269,   2.30758428,  -3.49298234],
       [  2.02798995,  -3.40095478,   2.42429199,  -3.04393881,
          1.63168791,  -3.75797075,   2.02798402,  -3.41475045],
       [  1.82837793,  -3.17420727,   2.20259299,  -2.7941038 ,
          1.45416286,  -3.55431074,   1.74851565,  -3.33788312],
       [  1.59868344,  -2.97828024,   1.90357199,  -2.54060667,
          1.2937949 ,  -3.41595381,   1.46879311,  -3.26222213],
       [  1.33557441,  -2.83087629,   1.53302088,  -2.33536571,
          1.13812795,  -3.32638687,   1.18875251,  -3.18775449],
       [  1.0438334 ,  -2.75709527,   1.12203386,  -2.22945875,
          0.96563294,  -3.2847318 ,   0.90835695,  -3.11447971],
       [  0.74198341,  -2.74302786,   0.76956251,  -2.21034187,
          0.71440431,  -3.27571386,   0.62760802,  -3.0423219 ],
       [  0.44023925,  -2.72584527,   0.47050657,  -2.19330471,
          0.40997192,  -3.25838583,   0.34653241,  -2.97115872],
       [  0.1384913 ,  -2.70872777,   0.16844409,  -2.17616981,
          0.1085385 ,  -3.24128574,   0.06517355,  -2.90083691],
       [ -0.16327307,  -2.69190126,  -0.13361372,  -2.15932673,
         -0.19293243,  -3.2244758 ,  -0.21645371,  -2.83129824],
       [ -0.46503976,  -2.67511671,  -0.43533171,  -2.14254468,
         -0.49474782,  -3.20768875,  -0.49812357,  -2.76253194],
       [ -0.76680106,  -2.65823584,  -0.73698911,  -2.12566989,
         -0.79661301,  -3.1908018 ,  -0.77817282,  -2.69270249],
       [ -1.06856117,  -2.6413328 ,  -1.03867373,  -2.10877078,
         -1.09844861,  -3.17389482,  -1.05715589,  -2.62114657],
       [ -1.37031761,  -2.62436586,  -1.34020314,  -2.09181684,
         -1.40043208,  -3.15691489,  -1.33492436,  -2.54732961],
       [ -1.67206309,  -2.60720628,  -1.64146611,  -2.0746848 ,
         -1.70266006,  -3.13972777,  -1.61121964,  -2.47073102],
       [ -1.97378859,  -2.58969229,  -1.94264111,  -2.05720275,
         -2.00493607,  -3.12218183,  -1.8858719 ,  -2.39103233],
       [ -2.27549813,  -2.57190936,  -2.24408922,  -2.03943485,
         -2.30690703,  -3.10438388,  -2.15863772,  -2.30778694],
       [ -2.57720563,  -2.55409866,  -2.5455111 ,  -2.02164167,
         -2.60890016,  -3.08655566,  -2.42920566,  -2.22043517],
       [ -2.87889609,  -2.53599232,  -2.82959304,  -2.00487584,
         -2.92819915,  -3.06710881,  -2.69720014,  -2.12832398],
       [ -3.1783987 ,  -2.49830275,  -3.06251821,  -1.97764271,
         -3.29427919,  -3.0189628 ,  -2.96206918,  -2.03052617],
       [ -3.46558056,  -2.40542078,  -3.257799  ,  -1.91415482,
         -3.67336211,  -2.89668673,  -3.22289035,  -1.92557493],
       [ -3.73233709,  -2.26400584,  -3.44818315,  -1.81259483,
         -4.01649103,  -2.71541685,  -3.47841553,  -1.81183123],
       [ -3.97527168,  -2.08457184,  -3.63272509,  -1.67569881,
         -4.31781826,  -2.49344486,  -3.73045721,  -1.692727  ],
       [ -4.19454071,  -1.87677329,  -3.80903611,  -1.50812477,
         -4.58004532,  -2.24542182,  -3.97945043,  -1.56919386],
       [ -4.39236758,  -1.64840072,  -3.97566113,  -1.31542772,
         -4.80907402,  -1.98137372,  -4.22558997,  -1.44176459],
       [ -4.57148359,  -1.40503728,  -4.131955  ,  -1.1028288 ,
         -5.01101217,  -1.70724576,  -4.46906488,  -1.31094915],
       [ -4.73460564,  -1.15065205,  -4.27831802,  -0.87439626,
         -5.19089327,  -1.42690783,  -4.7098048 ,  -1.17695203],
       [ -4.88440857,  -0.88818454,  -4.41755924,  -0.63017827,
         -5.35125789,  -1.14619082,  -4.94764162,  -1.03995588],
       [ -5.02694664,  -0.62167594,  -4.57630501,  -0.33630317,
         -5.47758827,  -0.9070487 ,  -5.16764636,  -0.90829743],
       [ -5.20631776,  -0.37970612,  -4.81937322,  -0.01256974,
         -5.59326229,  -0.7468425 ,  -5.38912734,  -0.78436609],
       [ -5.43859944,  -0.18782706,  -5.15785799,   0.26571402,
         -5.71934089,  -0.64136815,  -5.61358013,  -0.67545998],
       [ -5.71410618,  -0.06541629,  -5.54809103,   0.44149033,
         -5.88012132,  -0.5723229 ,  -5.84248173,  -0.58802648],
       [ -6.00916157,  -0.00102007,  -5.93457088,   0.52713865,
         -6.08375225,  -0.52917879,  -6.07753836,  -0.53016969],
       [ -6.31007013,   0.01878378,  -6.36485729,   0.54936254,
         -6.25528297,  -0.51179498,  -6.31879471,  -0.5053844 ],
       [ -6.59964404,  -0.06182797,  -6.82037697,   0.42375651,
         -6.37891111,  -0.54741245,  -6.56367138,  -0.50297139],
       [ -6.85144362,  -0.22744473,  -7.18330107,   0.19015092,
         -6.51958618,  -0.64504039,  -6.81143206,  -0.52076066],
       [ -7.07015404,  -0.43581489,  -7.43172893,  -0.04366828,
         -6.70857916,  -0.8279615 ,  -7.06144785,  -0.55671016],
       [ -7.29542956,  -0.63682171,  -7.61537514,  -0.21003067,
         -6.97548399,  -1.06361276,  -7.31327824,  -0.60966734],
       [ -7.55149946,  -0.79666315,  -7.79234896,  -0.32073548,
         -7.31064997,  -1.27259081,  -7.571836  ,  -0.6485326 ],
       [ -7.83190665,  -0.90831721,  -7.98499117,  -0.39735669,
         -7.67882213,  -1.41927772,  -7.82314794,  -0.66709308],
       [ -8.12756214,  -0.96924734,  -8.19162807,  -0.43970889,
         -8.06349621,  -1.49878579,  -8.06523598,  -0.66302035],
       [ -8.42928848,  -0.98058486,  -8.40879688,  -0.44757896,
         -8.44978008,  -1.51359075,  -8.29609848,  -0.63486626],
       [ -8.72926149,  -0.94611479,  -8.62522087,  -0.42295977,
         -8.83330211,  -1.46926981,  -8.51197175,  -0.57895342],
       [ -9.01948032,  -0.8632234 ,  -8.81590137,  -0.37020099,
         -9.22305927,  -1.35624581,  -8.7087636 ,  -0.49305045],
       [ -9.28315649,  -0.71746678,  -8.94806347,  -0.30246278,
         -9.61824951,  -1.13247078,  -8.88064601,  -0.37440023],
       [ -9.48039207,  -0.49133312,  -9.01382885,  -0.23280948,
         -9.9469553 ,  -0.74985677,  -9.01852419,  -0.21939867],
       [ -9.5675498 ,  -0.20422327,  -9.03753528,  -0.14422458,
        -10.09756431,  -0.26422196,  -9.10458573,  -0.0234238 ],
       [ -9.54670105,   0.09622022,  -9.02464256,  -0.01318939,
        -10.06875953,   0.20562983,  -9.14464591,   0.19711029],
       [ -9.44505272,   0.38006177,  -8.94937954,   0.18302583,
         -9.9407259 ,   0.57709772,  -9.13926586,   0.43172677],
       [ -9.32379541,   0.65690334,  -8.83518657,   0.44294814,
         -9.81240425,   0.87085855,  -9.09201631,   0.66927118],
       [ -9.20259199,   0.93376908,  -8.7138277 ,   0.72016895,
         -9.69135628,   1.14736921,  -9.00725721,   0.90032176],
       [ -9.08173666,   1.21078644,  -8.59294758,   0.9972446 ,
         -9.57052574,   1.42432827,  -8.89047732,   1.11832019],
       [ -8.96059904,   1.48768121,  -8.4716917 ,   1.27440924,
         -9.44950638,   1.70095319,  -8.7475185 ,   1.31998798],
       [ -8.84004984,   1.7648322 ,  -8.35862312,   1.53517217,
         -9.32147655,   1.99449224,  -8.58318733,   1.50417435],
       [ -8.70110855,   2.03174615,  -8.26664123,   1.7223062 ,
         -9.13557586,   2.34118611,  -8.40015673,   1.66967192],
       [ -8.49385366,   2.2507577 ,  -8.15444526,   1.83927626,
         -8.83326206,   2.66223914,  -8.20058812,   1.81567396],
       [ -8.23946819,   2.41253728,  -8.00911197,   1.93144328,
         -8.46982441,   2.89363128,  -7.98505074,   1.93984987],
       [ -7.95380912,   2.50932223,  -7.83551512,   1.98920518,
         -8.07210312,   3.02943927,  -7.75036797,   2.03287035],
       [ -7.65421209,   2.54562724,  -7.63548527,   2.01255626,
         -7.67293892,   3.07869822,  -7.50194417,   2.09979619],
       [ -7.35266647,   2.53042919,  -7.42034302,   2.00134021,
         -7.28498993,   3.05951816,  -7.24336521,   2.14558137],
       [ -7.05699954,   2.46923673,  -7.17252502,   1.94849724,
         -6.94147405,   2.98997623,  -6.97753146,   2.17535353],
       [ -6.76290211,   2.39958626,  -6.88332805,   1.87995822,
         -6.64247618,   2.91921431,  -6.70703814,   2.19448162],
       [ -6.46814904,   2.33276767,  -6.58376703,   1.81204921,
         -6.35253105,   2.85348612,  -6.43424272,   2.20826032],
       [ -6.17281446,   2.26856566,  -6.28447399,   1.74698419,
         -6.06115494,   2.79014713,  -6.15430033,   2.22432256],
       [ -5.87707958,   2.20623219,  -5.98506603,   1.68387717,
         -5.76909313,   2.72858721,  -5.87460031,   2.24273609],
       [ -5.58087048,   2.14619327,  -5.68511591,   1.62307924,
         -5.47662506,   2.66930729,  -5.59526135,   2.26406977],
       [ -5.28427443,   2.08809823,  -5.38417492,   1.56413728,
         -5.18437395,   2.61205918,  -5.31644932,   2.28902672],
       [ -4.98711047,   2.03298426,  -5.08169994,   1.50803823,
         -4.892521  ,   2.55793029,  -5.03839704,   2.31843855],
       [ -4.68939934,   1.98090822,  -4.76777134,   1.4532972 ,
         -4.61102733,   2.50851924,  -4.76149306,   2.35355975],
       [ -4.38958845,   1.94422269,  -4.41840992,   1.4116022 ,
         -4.36076698,   2.47684318,  -4.48625821,   2.39576701],
       [ -4.08760962,   1.94834066,  -4.04348216,   1.41676921,
         -4.13173709,   2.47991211,  -4.21336114,   2.4466933 ],
       [ -3.78908405,   1.9940722 ,  -3.67224107,   1.47362727,
         -3.90592704,   2.51451713,  -3.94362897,   2.50839241],
       [ -3.49963865,   2.08034474,  -3.31491217,   1.57995326,
         -3.68436513,   2.58073622,  -3.67805306,   2.58333683],
       [ -3.22355411,   2.20284677,  -2.97714815,   1.72977227,
         -3.46996007,   2.67592126,  -3.41762549,   2.67362215],
       [ -2.96491465,   2.35886222,  -2.66450009,   1.91810519,
         -3.26532922,   2.79961926,  -3.16072869,   2.77377518],
       [ -2.72509811,   2.54259163,  -2.37916121,   2.13658315,
         -3.071035  ,   2.94860012,  -2.90697238,   2.88227117],
       [ -2.50562808,   2.75019425,  -2.11982307,   2.38186032,
         -2.89143309,   3.11852819,  -2.65603512,   2.99783385],
       [ -2.30839512,   2.97906179,  -1.88849506,   2.65012533,
         -2.72829518,   3.30799824,  -2.40759228,   3.11920839],
       [ -2.13340506,   3.22534973,  -1.68436107,   2.93747026,
         -2.58244905,   3.51322919,  -2.16157469,   3.24559809],
       [ -1.98264763,   3.48717374,  -1.51496515,   3.23068124,
         -2.45033011,   3.74366623,  -1.91840178,   3.37603967],
       [ -1.84291712,   3.7550183 ,  -1.39124105,   3.47128517,
         -2.29459319,   4.03875143,  -1.68040005,   3.50844694],
       [ -1.66246358,   3.99692232,  -1.26903007,   3.63674718,
         -2.05589709,   4.35709745,  -1.44161662,   3.63679546],
       [ -1.43747682,   4.19791216,  -1.12466148,   3.76586825,
         -1.75029216,   4.62995607,  -1.19940627,   3.75727938],
       [ -1.17627389,   4.34893781,  -0.95739368,   3.86251527,
         -1.39515409,   4.83536035,  -0.95149226,   3.86450892],
       [ -0.88996652,   4.4442758 ,  -0.77144972,   3.92420918,
         -1.00848332,   4.96434242,  -0.69507603,   3.95141596],
       [ -0.59069816,   4.48239059,  -0.56884849,   3.94943816,
         -0.61254782,   5.01534301,  -0.43175514,   4.02124516],
       [ -0.28890542,   4.46888322,  -0.32242991,   3.93653828,
         -0.25538094,   5.00122816,  -0.16258922,   4.07620935],
       [  0.01213589,   4.44442827,  -0.04008031,   3.91359026,
          0.06435209,   4.97526628,   0.11149165,   4.1183661 ],
       [  0.31243565,   4.40972728,   0.245168  ,   3.88058621,
          0.37970331,   4.93886835,   0.38984658,   4.14914062],
       [  0.61223679,   4.36813563,   0.54014548,   3.83963019,
          0.68432811,   4.89664108,   0.67197815,   4.16964951],
       [  0.91213789,   4.32792408,   0.84279492,   3.79905111,
          0.98148086,   4.85679704,   0.95738608,   4.18107921],
       [  1.21216693,   4.28947515,   1.14590993,   3.76020629,
          1.27842393,   4.81874401,   1.24571696,   4.184257  ],
       [  1.51232341,   4.25278873,   1.44915691,   3.72314221,
          1.5754899 ,   4.78243524,   1.53662249,   4.18002995],
       [  1.81260785,   4.21786565,   1.75253585,   3.68785912,
          1.87267986,   4.74787218,   1.82975005,   4.16929371],
       [  2.11301997,   4.18470472,   2.05578294,   3.6543842 ,
          2.170257  ,   4.71502525,   2.12473791,   4.15301006],
       [  2.41353789,   4.15300829,   2.35749879,   3.62256033,
          2.46957698,   4.68345625,   2.42122297,   4.13218659],
       [  2.71404746,   4.12120933,   2.65762892,   3.5908013 ,
          2.770466  ,   4.65161735,   2.71889015,   4.10772245],
       [  3.01453247,   4.08908111,   2.95753494,   3.5587352 ,
          3.07153001,   4.61942703,   3.01746098,   4.08043264],
       [  3.31499293,   4.05662424,   3.25741687,   3.52634126,
          3.37256899,   4.58690721,   3.31670376,   4.05100436],
       [  3.61542895,   4.02383834,   3.55727401,   3.49361831,
          3.67358389,   4.55405838,   3.61641092,   4.02005995],
       [  3.91583934,   3.99072308,   3.8571209 ,   3.46056515,
          3.97455778,   4.520881  ,   3.91640267,   3.9881518 ],
       [  4.21622696,   3.95729608,   4.15717306,   3.42717511,
          4.27528086,   4.48741705,   4.21652982,   3.95576464],
       [  4.51660695,   3.92379862,   4.45749703,   3.39368421,
          4.57571688,   4.45391304,   4.51673937,   3.92307179],
       [  4.81698528,   3.89030928,   4.75788775,   3.36019332,
          4.8760828 ,   4.42042524,   4.81702538,   3.89006971],
       [  5.11736193,   3.85682673,   5.05827704,   3.32670933,
          5.17644682,   4.38694412,   5.11736193,   3.85682673],
       [  5.41773644,   3.82335168,   5.35866394,   3.29323322,
          5.47680893,   4.35347015,   5.41773644,   3.82335168],
       [  5.71810928,   3.7898838 ,   5.65905085,   3.2597633 ,
          5.7771677 ,   4.32000429,   5.71810928,   3.7898838 ],
       [  6.01848068,   3.75642521,   5.95958367,   3.22628719,
          6.0773777 ,   4.28656322,   6.01218513,   3.74909186],
       [  6.3188726 ,   3.7231403 ,   6.26038113,   3.19295723,
          6.37736407,   4.25332338,   6.29078679,   3.69187751],
       [  6.61930003,   3.69014067,   6.56131211,   3.15990216,
          6.67728796,   4.22037918,   6.54520631,   3.61259283]]





def dist(point1, point2):
    return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5



# thanks for https://github.com/cdthompson/deepracer-k1999-race-lines for the good racing line calculator which I forked to add new tracks https://github.com/fmacrae/deepracer-k1999-race-lines.  The output of that project is inputed to the reward funtion code as get_racing_line_waypoints fucntion contents.

# thanks to https://stackoverflow.com/questions/20924085/python-conversion-between-coordinates
def rect(r, theta):
    """
    theta in degrees
    returns tuple; (float, float); (x,y)
    """

    x = r * math.cos(math.radians(theta))
    y = r * math.sin(math.radians(theta))
    return x, y


# thanks to https://stackoverflow.com/questions/20924085/python-conversion-between-coordinates
def polar(x, y):
    """
    returns r, theta(degrees)
    """

    r = (x ** 2 + y ** 2) ** .5
    theta = math.degrees(math.atan2(y,x))
    return r, theta


def angle_mod_360(angle):
    """
    Maps an angle to the interval -180, +180.
    Examples:
    angle_mod_360(362) == 2
    angle_mod_360(270) == -90
    :param angle: angle in degree
    :return: angle in degree. Between -180 and +180
    """

    n = math.floor(angle/360.0)

    angle_between_0_and_360 = angle - n*360.0

    if angle_between_0_and_360 <= 180.0:
        return angle_between_0_and_360
    else:
        return angle_between_0_and_360 - 360


def get_waypoints_ordered_in_driving_direction(params):
    # waypoints are always provided in counter clock wise order
    if params['is_reversed']: # driving clock wise.
        return list(reversed(params['waypoints']))
    else: # driving counter clock wise.
        return params['waypoints']

def get_racingline_waypoints_ordered_in_driving_direction(racingline_waypoints, params):
    # waypoints are always provided in counter clock wise order
    if params['is_reversed']: # driving clock wise.
        return list(reversed(racingline_waypoints))
    else: # driving counter clock wise.
        return racingline_waypoints


def up_sample(waypoints, factor):
    """
    Adds extra waypoints in between provided waypoints
    :param waypoints:
    :param factor: integer. E.g. 3 means that the resulting list has 3 times as many points.
    :return:
    """
    p = waypoints
    n = len(p)

    return [[i / factor * p[(j+1) % n][0] + (1 - i / factor) * p[j][0],
             i / factor * p[(j+1) % n][1] + (1 - i / factor) * p[j][1]] for j in range(n) for i in range(factor)]


# taken from https://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/
# A Python3 program to find if 2 given line segments intersect or not

class Point:
	def __init__(self, x, y):
		self.x = x
		self.y = y

# Given three collinear points p, q, r, the function checks if
# point q lies on line segment 'pr'
def onSegment(p, q, r):
	if ( (q.x <= max(p.x, r.x)) and (q.x >= min(p.x, r.x)) and
		(q.y <= max(p.y, r.y)) and (q.y >= min(p.y, r.y))):
		return True
	return False

def orientation(p, q, r):
	# to find the orientation of an ordered triplet (p,q,r)
	# function returns the following values:
	# 0 : Collinear points
	# 1 : Clockwise points
	# 2 : Counterclockwise
	
	# See https://www.geeksforgeeks.org/orientation-3-ordered-points/amp/
	# for details of below formula.
	
	val = (float(q.y - p.y) * (r.x - q.x)) - (float(q.x - p.x) * (r.y - q.y))
	if (val > 0):
		
		# Clockwise orientation
		return 1
	elif (val < 0):
		
		# Counterclockwise orientation
		return 2
	else:
		
		# Collinear orientation
		return 0

# The main function that returns true if
# the line segment 'p1q1' and 'p2q2' intersect.
def doIntersect(p1,q1,p2,q2):
	
	# Find the 4 orientations required for
	# the general and special cases
	o1 = orientation(p1, q1, p2)
	o2 = orientation(p1, q1, q2)
	o3 = orientation(p2, q2, p1)
	o4 = orientation(p2, q2, q1)

	# General case
	if ((o1 != o2) and (o3 != o4)):
		return True

	# Special Cases

	# p1 , q1 and p2 are collinear and p2 lies on segment p1q1
	if ((o1 == 0) and onSegment(p1, p2, q1)):
		return True

	# p1 , q1 and q2 are collinear and q2 lies on segment p1q1
	if ((o2 == 0) and onSegment(p1, q2, q1)):
		return True

	# p2 , q2 and p1 are collinear and p1 lies on segment p2q2
	if ((o3 == 0) and onSegment(p2, p1, q2)):
		return True

	# p2 , q2 and q1 are collinear and q1 lies on segment p2q2
	if ((o4 == 0) and onSegment(p2, q1, q2)):
		return True

	# If none of the cases
	return False



def not_collided(params, i, racingline_waypoints, inner_waypoints, outer_waypoints):
    car_x = params['x']
    car_y = params['y']

    #define the line the car is trying to get to
    p1 = Point(car_x, car_y)
    q1 = Point(racingline_waypoints[i][0],racingline_waypoints[i][1])
        
    #now loop through the intervening boundary lines to see if it crosses any boundaries
    for iLoop in range(i):
        #check inner
        p2 = Point(inner_waypoints[i][0], inner_waypoints[i][1])
        q2 = Point(inner_waypoints[i+1][0], inner_waypoints[i+1][1])
        if doIntersect(p1, q1, p2, q2):
            #we've a collision
            return False
        #check outer
        p2 = Point(outer_waypoints[i][0], outer_waypoints[i][1])
        q2 = Point(outer_waypoints[i+1][0], outer_waypoints[i+1][1])
        if doIntersect(p1, q1, p2, q2):
            #we've a collision
            return False
    return True



def get_target_point(params):
    RATIO_UPSAMPLE = 2
    #waypoints = up_sample(get_waypoints_ordered_in_driving_direction(params), RATIO_UPSAMPLE)
    waypoints_input = np.array(get_racing_line_waypoints())

    center_line = waypoints_input[:,0:2]
    inner_border = waypoints_input[:,2:4]
    outer_border = waypoints_input[:,4:6]
    racing_line = waypoints_input[:,6:8]

    racingline_waypoints= up_sample(get_racingline_waypoints_ordered_in_driving_direction(racing_line, params), RATIO_UPSAMPLE)
    inner_waypoints= up_sample(get_racingline_waypoints_ordered_in_driving_direction(inner_border, params), RATIO_UPSAMPLE)
    outer_waypoints= up_sample(get_racingline_waypoints_ordered_in_driving_direction(outer_border, params), RATIO_UPSAMPLE)
    waypoints= up_sample(get_racingline_waypoints_ordered_in_driving_direction(center_line, params), RATIO_UPSAMPLE)

    car = [params['x'], params['y']]

    distances = [dist(p, car) for p in waypoints]
    min_dist = min(distances)
    i_closest = distances.index(min_dist)

    n = len(waypoints)

    #waypoints_starting_with_closest = [waypoints[(i+i_closest) % n] for i in range(n)]
    racingline_waypoints_starting_with_closest = [racingline_waypoints[(i+i_closest) % n] for i in range(n)]
    inner_waypoints_starting_with_closest = [inner_waypoints[(i+i_closest) % n] for i in range(n)]
    outer_waypoints_starting_with_closest = [outer_waypoints[(i+i_closest) % n] for i in range(n)]
    
    #skip forward till you find a path that collided with a boundary
    i_first_outside = 0
    while not_collided(params, i_first_outside, racingline_waypoints_starting_with_closest, inner_waypoints_starting_with_closest, outer_waypoints_starting_with_closest):
      i_first_outside+=1
      if i_first_outside >= (n - 1) : break

    #r = params['track_width'] * 0.9
    #is_inside = [dist(p, car) < r for p in waypoints_starting_with_closest]
    #i_first_outside = is_inside.index(False)

    #if i_first_outside < 0:  # this can only happen if we choose r as big as the entire track
    #    return waypoints[i_closest]
    #work back to the closest one that doesn't go outside the bounds of the track.
    #return waypoints_starting_with_closest[i_first_outside]


    return racingline_waypoints_starting_with_closest[i_first_outside]
      

def get_target_steering_degree(params):
    tx, ty = get_target_point(params)
    car_x = params['x']
    car_y = params['y']
    dx = tx-car_x
    dy = ty-car_y
    heading = params['heading']

    _, target_angle = polar(dx, dy)

    steering_angle = target_angle - heading

    return angle_mod_360(steering_angle)


def score_steer_to_point_ahead(params):
    best_stearing_angle = get_target_steering_degree(params)
    steering_angle = params['steering_angle']

    error = (steering_angle - best_stearing_angle) / 60.0  # 60 degree is already really bad

    score = 1.0 - abs(error)

    return max(score, 0.01)  # optimizer is rumored to struggle with negative numbers and numbers too close to zero


#There is one row per waypoint.
#There are 8 columns.

#1. x coordinate of centre lane at waypoint
#2. y coordinate of centre lane at waypoint
#3. x coordinate of left lane beside waypoint
#4. y coordinate of left lane beside waypoint
#5. x coordinate of right lane
#6. y coordinate of right lane
#7. x coordinate of racingline
#8. y coordinate of racingline

def test_funct():
    return 2
    
def reward_function(params):
    # straightsector = list(range(0,50))
    # straightsector.extend(range(306,355))


    reward_score = float(score_steer_to_point_ahead(params))
    #if params["closest_waypoints"][1] in straightsector:
    #    reward_score = reward_score + (2 * params['speed']) #give a wee nudge for going faster
    return reward_score





def get_test_params():
    return {
        'x': 0.7,
        'y': 1.05,
        'heading': 160.0,
        'track_width': 0.45,
        'is_reversed': False,
        'steering_angle': 0.0,
        'waypoints': [
            [0.75, -0.7],
            [1.0, 0.0],
            [0.7, 0.52],
            [0.58, 0.7],
            [0.48, 0.8],
            [0.15, 0.95],
            [-0.1, 1.0],
            [-0.7, 0.75],
            [-0.9, 0.25],
            [-0.9, -0.55],
        ]
    }


def test_reward():
    params = get_test_params()

    reward = reward_function(params)

    print("test_reward: {}".format(reward))

    assert reward > 0.0
def run_tests():
    test_reward()

    print("All tests successful")


#run_tests()